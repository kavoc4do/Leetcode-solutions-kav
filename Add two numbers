class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        #keep track of result list (%10 for only ones place)
        added=ListNode(val=(l1.val+l2.val)%10)
        #keep track of carry over (//10 0 is lesser than 10 or 1 if greater than 10)
        carry=(l1.val+l2.val)//10
        #keep track of current 
        current_node=added
        while(l1.next and l2.next):
            l1=l1.next
            l2=l2.next
            current_node.next=ListNode(val=(carry+l1.val+l2.val)%10)
            carry=(carry+l1.val+l2.val)//10
            current_node=current_node.next
 
        #if theres still something in l1
        while(l1.next):
            l1=l1.next
            current_node.next=ListNode(val=(carry+l1.val)%10)
            carry=(carry+l1.val)//10
            current_node=current_node.next
        #if theres still something in l2
        while(l2.next):
            l2=l2.next
            current_node.next=ListNode(val=(carry+l2.val)%10)
            carry=(carry+l2.val)//10
            current_node=current_node.next

        #if carry over still exists 
        if (carry)>0:
            current_node.next=ListNode(val=1)
        return(added)
